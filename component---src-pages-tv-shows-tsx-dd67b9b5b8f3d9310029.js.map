{"version":3,"sources":["webpack:///./src/components/allTVShows.js","webpack:///./src/pages/tv-shows.tsx"],"names":["slugify","require","Item","props","name","nodes","frontmatter","id","style","marginTop","marginBottom","display","title","boxShadow","marginRight","to","marginLeft","map","item","index","key","toString","fields","slug","season","episode","AllTVShows","query","render","data","JSON","parse","stringify","allMarkdownRemark","group","pageQuery","AllShows","location","siteTitle","site","siteMetadata","description","paddingTop"],"mappings":"6NAEMA,EAAUC,EAAQ,QAExB,SAASC,EAAKC,GACZ,IAAMC,EAAOD,EAAME,MAAM,GAAGC,YAAYF,KAExC,OACE,iCACE,wBACEG,GAAIP,EAAQI,GACZI,MAAO,CACLC,UAAW,EACXC,aAAc,SAGhB,0BACEF,MAAO,CACLG,QAAS,OACTD,aAAc,SAEhB,kBAAC,OAAD,CACEE,MAAK,oBAAsBR,EAC3BI,MAAO,CACLK,UAAU,OACVH,aAAc,OACdI,YAAa,QAEfC,GAAE,YAAcf,EAAQI,IAP1B,KAUA,8BAAOA,IAET,yBACEI,MAAO,CACLQ,WAAY,SAEZb,EAAME,MAAMY,KAAI,SAACC,EAAMC,GAAP,OACjB,0BAAMC,IAAKD,EAAME,YAChB,kBAAC,OAAD,CACET,MAAK,WAAaM,EAAKZ,YAAYM,MACnCJ,MAAO,CACLG,QAAS,eACTE,UAAU,OACVH,aAAc,OACdI,YAAa,QAEfC,GAAIG,EAAKI,OAAOC,MACbL,EAAKZ,YAAYkB,OATtB,IAS+BN,EAAKZ,YAAYmB,gBAU5D,IAwCeC,EAxCI,SAACvB,GAAD,OACjB,kBAAC,cAAD,CACEwB,MAAK,aAuBLC,OAAQ,SAAAC,GACN,IAAIxB,EAAQyB,KAAKC,MAAMD,KAAKE,UAAUH,EAAM,KAAM,IAAII,kBAAkBC,MAExE,OACE,6BACG7B,EAAMY,KAAI,SAACC,EAAMC,GAAP,OACV,kBAACjB,EAAD,CAAMkB,IAAKD,EAAME,WACjBhB,MAAOa,EAAKb,aA/BrB,U,oCCjBW8B,GAFEC,UAvBE,SAAC,GAAwC,IAAtCP,EAAsC,EAAtCA,KAAMQ,EAAgC,EAAhCA,SAClBC,EAAYT,EAAKU,KAAKC,aAAa5B,MACnCA,EAAQ,uBAEd,OACE,kBAAC,IAAD,CAAQyB,SAAUA,EAAUzB,MAAO0B,GACjC,kBAAC,IAAD,CAAK1B,MAAOA,EAAO6B,YAAY,wEAC/B,wBAAIjC,MAAO,CAAEC,UAAW,MAAQG,GAEhC,kBAAC,EAAD,MAEA,2BACE,kBAAC,OAAD,CAAMJ,MAAO,CAAEK,UAAW,QAAUE,GAAG,KAAvC,gBAIF,yBAAKP,MAAO,CAAEkC,WAAY,SACxB,kBAAC,IAAD,SAQiB,e","file":"component---src-pages-tv-shows-tsx-dd67b9b5b8f3d9310029.js","sourcesContent":["import React from \"react\"\nimport { StaticQuery, graphql, Link } from \"gatsby\"\nconst slugify = require('@sindresorhus/slugify');\n\nfunction Item(props) {\n  const name = props.nodes[0].frontmatter.name\n\n  return (\n    <article>\n      <h3\n        id={slugify(name)}\n        style={{\n          marginTop: 0,\n          marginBottom: '2rem'\n        }}\n      >\n        <span\n          style={{\n            display: 'flex',\n            marginBottom: '10px',\n          }}>\n          <Link\n            title={`All reviews for: ${name}`}\n            style={{\n              boxShadow: `none`,\n              marginBottom: '10px',\n              marginRight: '15px',\n            }}\n            to={`tv-shows#${slugify(name)}`}>\n            #\n          </Link>\n          <span>{name}</span>\n        </span>\n        <div\n          style={{\n            marginLeft: '33px'\n          }}>\n          { props.nodes.map((item, index) =>\n           <span key={index.toString()}>\n            <Link\n              title={`Review: ${item.frontmatter.title}`}\n              style={{\n                display: 'inline-block',\n                boxShadow: `none`,\n                marginBottom: '10px',\n                marginRight: '15px',\n              }}\n              to={item.fields.slug}>\n                {item.frontmatter.season}x{item.frontmatter.episode}\n            </Link>\n           </span>\n          )}\n        </div>\n      </h3>\n    </article>\n  );\n}\n\nconst AllTVShows = (props) => (\n  <StaticQuery\n    query={graphql`\n      {\n        allMarkdownRemark(sort: {order: [ASC, ASC], fields: [frontmatter___season, frontmatter___episode]}, filter: {frontmatter: {type: {eq: \"series\"}}}) {\n          group(field: frontmatter___name) {\n            nodes {\n              fields {\n                slug\n              }\n              frontmatter {\n                date(formatString: \"MMMM DD, YYYY\")\n                title\n                name\n                rating\n                season\n                episode\n              }\n              id\n            }\n            totalCount\n          }\n        }\n      }\n    `}\n    render={data => {\n      let nodes = JSON.parse(JSON.stringify(data, null, 4)).allMarkdownRemark.group;\n\n      return (\n        <div>\n         { nodes.map((item, index) =>\n           <Item key={index.toString()}\n           nodes={item.nodes} />\n         )}\n       </div>\n      )\n    }}\n  ></StaticQuery>\n)\n\nexport default AllTVShows","// Gatsby supports TypeScript natively!\nimport React from \"react\"\nimport { PageProps, Link, graphql } from \"gatsby\"\n\nimport AllTVShows from \"../components/allTVShows\"\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\ntype Data = {\n  site: {\n    siteMetadata: {\n      title: string\n    }\n  }\n}\n\nconst AllShows = ({ data, location }: PageProps<Data>) => {\n  const siteTitle = data.site.siteMetadata.title\n  const title = \"All TV Shows Reviews\"\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title={title} description=\"All my TV Shows reviews including date, rating and some thoughts...\" />\n      <h1 style={{ marginTop: `0` }}>{title}</h1>\n\n      <AllTVShows />\n\n      <p>\n        <Link style={{ boxShadow: `none` }} to=\"/\">\n          &#10229; Back home\n        </Link>\n      </p>\n      <div style={{ paddingTop: `2rem` }}>\n        <Bio />\n      </div>\n    </Layout>\n  )\n}\n\nexport default AllShows\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n  }\n`\n"],"sourceRoot":""}