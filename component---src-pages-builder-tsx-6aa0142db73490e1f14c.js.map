{"version":3,"sources":["webpack:///./src/components/fileBuilder.js","webpack:///./src/pages/builder.tsx"],"names":["slugify","require","FileBuilder","state","comment","episode","markdown","rating","season","show","share","onChange","event","setState","target","name","value","onClick","preventDefault","document","querySelector","select","execCommand","prepareMarkdown","now","Date","month","getMonth","seconds","getSeconds","date","getFullYear","getDate","getHours","getMinutes","i","render","Item","props","nodes","frontmatter","className","htmlFor","id","this","defaultValue","query","data","JSON","parse","stringify","allMarkdownRemark","group","map","item","index","key","toString","type","rows","readOnly","href","React","Component","pageQuery","AllShows","location","siteTitle","site","siteMetadata","title","description","style","marginTop"],"mappings":"+LAEMA,EAAUC,EAAQ,QAEHC,E,oJACnBC,MAAQ,CACNC,QAAS,GACTC,QAAS,GACTC,SAAU,GACVC,OAAQ,IACRC,OAAQ,GACRC,KAAM,GACNC,MAAO,K,EAgCTC,SAAW,SAAAC,GAAU,IAAD,EAClB,EAAKC,WAAL,MACGD,EAAME,OAAOC,MAAOH,EAAME,OAAOE,MADpC,K,EAKFC,QAAU,SAAAL,GACRA,EAAMM,iBACKC,SAASC,cAAc,qBAC/BC,SACHF,SAASG,YAAY,S,8CAvCvBC,gBAAA,SAAgBpB,GACd,IAAMqB,EAAM,IAAIC,KACZC,EAAQF,EAAIG,WAAa,EACzBC,EAAUJ,EAAIK,aACdH,EAAQ,KAAIA,EAAK,IAAOA,GACxBE,EAAU,KAAIA,EAAO,IAAOA,GAKhC,IAJA,IAAME,EAAUN,EAAIO,cAAV,IAA2BL,EAA3B,IAAoCF,EAAIQ,UAAxC,IAAqDR,EAAIS,WAAzD,IAAuET,EAAIU,aAA3E,IAA2FN,EAEjGrB,EAAS,GAEJ4B,EAAI,EAAGA,GAAKhC,EAAMI,OAAQ4B,IACjC5B,GAAU,KAGZ,MAAM,8BAEAJ,EAAMM,KAFZ,IAEoBN,EAAMK,OAF1B,IAEoCL,EAAME,QAF1C,aAGKyB,EAHL,aAIK3B,EAAMM,KAJX,gBAKON,EAAMK,OALb,gBAMQL,EAAME,QANd,eAOOF,EAAMI,OAPb,mBAQYA,EARZ,cASqB,MAAhBJ,EAAMO,MAAgB,OAAS,SATpC,aAYFP,EAAMC,QAAUD,EAAMC,QAnBG,+C,EAkCzBgC,OAAA,WACE,SAASC,EAAKC,GACZ,IAAMvB,EAAOuB,EAAMC,MAAM,GAAGC,YAAYzB,KACxC,OAAO,4BAAQC,MAAOD,GAAOA,GAG/B,OACE,6BACE,0BAAM0B,UAAU,WACd,yBAAKA,UAAU,OACb,2BAAOC,QAAQ,OAAOD,UAAU,cAAhC,YAGA,4BACEA,UAAU,cACVE,GAAG,OACH5B,KAAK,OACLJ,SAAUiC,KAAKjC,SACfkC,aAAcD,KAAKzC,MAAMM,MAEzB,4BAAQO,MAAM,IAAd,kBACA,kBAAC,cAAD,CACE8B,MAAK,aA6BLV,OAAQ,SAAAW,GAIN,OAHYC,KAAKC,MAAMD,KAAKE,UAAUH,EAAM,KAAM,IAC/CI,kBAAkBC,MAERC,KAAI,SAACC,EAAMC,GAAP,OACf,kBAAClB,EAAD,CAAMmB,IAAKD,EAAME,WAAYlB,MAAOe,EAAKf,gBAMnD,yBAAKE,UAAU,OACb,2BAAOC,QAAQ,SAASD,UAAU,cAAlC,UAGA,2BACEE,GAAG,SACHe,KAAK,SACL3C,KAAK,SACLJ,SAAUiC,KAAKjC,YAGnB,yBAAK8B,UAAU,OACb,2BAAOC,QAAQ,UAAUD,UAAU,cAAnC,WAGA,2BACEE,GAAG,UACHe,KAAK,SACL3C,KAAK,UACLJ,SAAUiC,KAAKjC,YAGnB,yBAAK8B,UAAU,OACb,2BAAOC,QAAQ,SAASD,UAAU,cAAlC,UAGA,4BACEA,UAAU,cACVE,GAAG,SACHhC,SAAUiC,KAAKjC,SACfI,KAAK,SACL8B,aAAcD,KAAKzC,MAAMI,QAEzB,4BAAQS,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,OAGJ,yBAAKyB,UAAU,OACb,2BAAOC,QAAQ,UAAUD,UAAU,cAAnC,WAGA,8BACEA,UAAU,eACVE,GAAG,UACHgB,KAAK,IACL5C,KAAK,UACLJ,SAAUiC,KAAKjC,YAGnB,yBAAK8B,UAAU,OACb,2BAAOC,QAAQ,WAAWD,UAAU,cAApC,YAGA,8BACEmB,UAAQ,EACRnB,UAAU,eACVE,GAAG,WACHgB,KAAK,IACL5C,KAAK,WACLC,MAAO4B,KAAKrB,gBAAgBqB,KAAKzC,UAGrC,yBAAKsC,UAAU,OACb,2BAAOC,QAAQ,QAAQD,UAAU,cAAjC,SAGA,4BACEA,UAAU,cACVE,GAAG,QACH5B,KAAK,QACLJ,SAAUiC,KAAKjC,SACfkC,aAAcD,KAAKzC,MAAMO,OAEzB,4BAAQM,MAAM,KAAd,SACA,4BAAQA,MAAM,KAAd,UAGJ,yBAAKyB,UAAU,WACb,4BAAQxB,QAAS2B,KAAK3B,SAAtB,QACA,uBACE4C,KAAI,0FAA4F7D,EAC9F4C,KAAKzC,MAAMM,MADT,IAECmC,KAAKzC,MAAMK,OAFZ,IAEsBoC,KAAKzC,MAAME,QAFjC,aADN,6B,GApM6ByD,IAAMC,W,wBC6BlCC,GAFEC,UAfE,SAAC,GAAwC,IAAtClB,EAAsC,EAAtCA,KAAMmB,EAAgC,EAAhCA,SAClBC,EAAYpB,EAAKqB,KAAKC,aAAaC,MAGzC,OACE,kBAAC,IAAD,CAAQJ,SAAUA,EAAUI,MAAOH,GACjC,kBAAC,IAAD,CAAKG,MAJK,UAISC,YAAY,KAE/B,wBAAIC,MAAO,CAAEC,UAAW,MANd,WAQV,kBAAC,EAAD,QAOmB","file":"component---src-pages-builder-tsx-6aa0142db73490e1f14c.js","sourcesContent":["import React from \"react\"\nimport { StaticQuery, graphql } from \"gatsby\"\nconst slugify = require(\"@sindresorhus/slugify\")\n\nexport default class FileBuilder extends React.Component {\n  state = {\n    comment: \"\",\n    episode: \"\",\n    markdown: \"\",\n    rating: \"3\",\n    season: \"\",\n    show: \"\",\n    share: \"0\",\n  }\n\n  prepareMarkdown(state) {\n    const now = new Date()\n    let month = now.getMonth() + 1\n    let seconds = now.getSeconds()\n    if (month < 10) month = `0${month}`\n    if (seconds < 10) seconds = `0${seconds}`\n    const date = `${now.getFullYear()}-${month}-${now.getDate()}T${now.getHours()}:${now.getMinutes()}:${seconds}`\n    const defaultComment = \"*[No review was written for this episode]*\"\n    let rating = \"\"\n\n    for (let i = 0; i < +state.rating; i++) {\n      rating += \"⭐️\"\n    }\n\n    return `---\ntype: series\ntitle: \"${state.show} ${state.season}x${state.episode}\"\ndate: \"${date}\"\nname: \"${state.show}\"\nseason: ${+state.season}\nepisode: ${+state.episode}\nrating: ${+state.rating}\nratingEmoji: \"${rating}\"\nshare: ${state.share === \"1\" ? \"true\" : \"false\"}\n---\n\n${state.comment ? state.comment : defaultComment}`\n  }\n\n  onChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value,\n    })\n  }\n\n  onClick = event => {\n    event.preventDefault()\n    const el = document.querySelector('[name=\"markdown\"]')\n    el.select()\n    document.execCommand(\"copy\")\n  }\n  render() {\n    function Item(props) {\n      const name = props.nodes[0].frontmatter.name\n      return <option value={name}>{name}</option>\n    }\n\n    return (\n      <div>\n        <form className=\"builder\">\n          <div className=\"row\">\n            <label htmlFor=\"show\" className=\"form-label\">\n              TV Shows\n            </label>\n            <select\n              className=\"form-select\"\n              id=\"show\"\n              name=\"show\"\n              onChange={this.onChange}\n              defaultValue={this.state.show}\n            >\n              <option value=\"\">Select TV Show</option>\n              <StaticQuery\n                query={graphql`\n                  {\n                    allMarkdownRemark(\n                      sort: {\n                        order: [ASC, ASC]\n                        fields: [frontmatter___season, frontmatter___episode]\n                      }\n                      filter: { frontmatter: { type: { eq: \"series\" } } }\n                    ) {\n                      group(field: frontmatter___name) {\n                        nodes {\n                          fields {\n                            slug\n                          }\n                          frontmatter {\n                            date(formatString: \"MMMM DD, YYYY\")\n                            title\n                            name\n                            rating\n                            season\n                            episode\n                          }\n                          id\n                        }\n                        totalCount\n                      }\n                    }\n                  }\n                `}\n                render={data => {\n                  let nodes = JSON.parse(JSON.stringify(data, null, 4))\n                    .allMarkdownRemark.group\n\n                  return nodes.map((item, index) => (\n                    <Item key={index.toString()} nodes={item.nodes} />\n                  ))\n                }}\n              ></StaticQuery>\n            </select>\n          </div>\n          <div className=\"row\">\n            <label htmlFor=\"Season\" className=\"form-label\">\n              Season\n            </label>\n            <input\n              id=\"Season\"\n              type=\"number\"\n              name=\"season\"\n              onChange={this.onChange}\n            />\n          </div>\n          <div className=\"row\">\n            <label htmlFor=\"Episode\" className=\"form-label\">\n              Episode\n            </label>\n            <input\n              id=\"Episode\"\n              type=\"number\"\n              name=\"episode\"\n              onChange={this.onChange}\n            />\n          </div>\n          <div className=\"row\">\n            <label htmlFor=\"rating\" className=\"form-label\">\n              Rating\n            </label>\n            <select\n              className=\"form-select\"\n              id=\"rating\"\n              onChange={this.onChange}\n              name=\"rating\"\n              defaultValue={this.state.rating}\n            >\n              <option value=\"1\">1</option>\n              <option value=\"2\">2</option>\n              <option value=\"3\">3</option>\n              <option value=\"4\">4</option>\n              <option value=\"5\">5</option>\n            </select>\n          </div>\n          <div className=\"row\">\n            <label htmlFor=\"Comment\" className=\"form-label\">\n              Comment\n            </label>\n            <textarea\n              className=\"form-control\"\n              id=\"Comment\"\n              rows=\"3\"\n              name=\"comment\"\n              onChange={this.onChange}\n            ></textarea>\n          </div>\n          <div className=\"row\">\n            <label htmlFor=\"markdown\" className=\"form-label\">\n              Markdown\n            </label>\n            <textarea\n              readOnly\n              className=\"form-control\"\n              id=\"markdown\"\n              rows=\"3\"\n              name=\"markdown\"\n              value={this.prepareMarkdown(this.state)}\n            ></textarea>\n          </div>\n          <div className=\"row\">\n            <label htmlFor=\"share\" className=\"form-label\">\n              Share\n            </label>\n            <select\n              className=\"form-select\"\n              id=\"share\"\n              name=\"share\"\n              onChange={this.onChange}\n              defaultValue={this.state.share}\n            >\n              <option value=\"0\">False</option>\n              <option value=\"1\">True</option>\n            </select>\n          </div>\n          <div className=\"actions\">\n            <button onClick={this.onClick}>Copy</button>\n            <a\n              href={`https://github.com/quicoto/reviews/new/master/content/blog/tv-shows/?filename=tv-shows/${slugify(\n                this.state.show\n              )}/${this.state.season}x${this.state.episode}/index.md`}\n            >\n              Create file on Github\n            </a>\n          </div>\n        </form>\n      </div>\n    )\n  }\n}\n\n// const FileBuilder = props => (\n\n// )\n\n// export default FileBuilder\n","// Gatsby supports TypeScript natively!\nimport React from \"react\"\nimport { PageProps, Link, graphql } from \"gatsby\"\n\nimport FileBuilder from \"../components/fileBuilder\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\ntype Data = {\n  site: {\n    siteMetadata: {\n      title: string\n    }\n  }\n}\n\nconst AllShows = ({ data, location }: PageProps<Data>) => {\n  const siteTitle = data.site.siteMetadata.title\n  const title = \"Builder\"\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title={title} description=\"\" />\n\n      <h1 style={{ marginTop: `0` }}>{title}</h1>\n\n      <FileBuilder />\n    </Layout>\n  )\n}\n\nexport default AllShows\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n  }\n`\n"],"sourceRoot":""}