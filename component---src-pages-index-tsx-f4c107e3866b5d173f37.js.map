{"version":3,"sources":["webpack:///./src/components/totalEpisodes.js","webpack:///./src/components/topShows.js","webpack:///./src/components/numberOfShows.js","webpack:///./src/pages/index.tsx"],"names":["TotalEpisodes","query","render","data","edges","JSON","parse","stringify","allMarkdownRemark","className","length","ShowItem","props","show","average","ShowsList","groups","topShows","forEach","group","nodes","frontmatter","totalCount","total","node","rating","parseFloat","toFixed","push","sort","a","b","n","slice","map","key","TopShows","NumberOfShows","pageQuery","BlogIndex","location","siteTitle","site","siteMetadata","title","posts","description","fields","slug","style","marginTop","boxShadow","marginRight","to","display","fontSize","date"],"mappings":"iwBA4BeA,EAzBO,kBACpB,kBAAC,cAAD,CACEC,MAAK,YAWLC,OAAQ,SAAAC,GACN,IAAIC,EAAMC,KAAKC,MAAMD,KAAKE,UAAUJ,EAAM,KAAM,IAAIK,kBAAkBJ,MAEtE,OACE,yBAAKK,UAAU,kBACZL,EAAMM,SAjBf,U,wBCDF,SAASC,EAASC,GAChB,OACE,4BACE,gCAASA,EAAMC,MADjB,KACkCD,EAAME,QADxC,KAMJ,SAASC,EAAUH,GACjB,IAAMI,EAASJ,EAAMI,OACjBC,EAAW,GA+Bf,OA7BAD,EAAOE,SAAQ,SAACC,GACd,IAAMC,EAAQD,EAAMC,MAChBP,EAAO,CACTA,KAAMO,EAAM,GAAGC,YAAYR,KAC3BS,WAAYH,EAAMG,YAEhBC,EAAQ,EAEZH,EAAMF,SAAQ,SAACM,GACbD,GAASC,EAAKH,YAAYI,UAG5BZ,EAAKC,QAAUY,YAAYH,EAAQH,EAAMV,QAAQiB,QAAQ,IACzDV,EAASW,KAAKf,MAIhBI,EAASY,MAAK,SAAUC,EAAGC,GACzB,IAAIC,EAAID,EAAEjB,QAAUgB,EAAEhB,QACtB,OAAU,IAANkB,EACOA,EAGJD,EAAET,WAAaQ,EAAER,cAI1BL,EAAWA,EAASgB,MAAM,EAAG,GAG3B,4BACIhB,EAASiB,KAAI,SAACrB,GAAD,OACb,kBAACF,EAAD,CAAUwB,IAAKtB,EAAKA,KACVA,KAAMA,EAAKA,KACXC,QAASD,EAAKC,cAMhC,IA6BesB,EA7BE,kBACf,kBAAC,cAAD,CACEnC,MAAK,aAeLC,OAAQ,SAAAC,GACN,IAAIa,EAASX,KAAKC,MAAMD,KAAKE,UAAUJ,EAAM,KAAM,IAAIK,kBAAkBW,MAEzE,OACE,6BACE,kBAACJ,EAAD,CAAWC,OAAQA,MArB3B,U,YCvBaqB,EA9BO,kBACpB,kBAAC,cAAD,CACEpC,MAAK,aAgBLC,OAAQ,SAAAC,GACN,IAAIa,EAAOX,KAAKC,MAAMD,KAAKE,UAAUJ,EAAM,KAAM,IAAIK,kBAAkBW,MAEvE,OACE,yBAAKV,UAAU,kBACZO,EAAON,SAtBhB,U,oCC6FW4B,GAFEC,UA5DG,SAAC,GAAwC,IAAtCpC,EAAsC,EAAtCA,KAAMqC,EAAgC,EAAhCA,SACnBC,EAAYtC,EAAKuC,KAAKC,aAAaC,MACnCC,EAAQ1C,EAAKK,kBAAkBJ,MAErC,OACE,kBAAC,IAAD,CAAQoC,SAAUA,EAAUI,MAAOH,GACjC,kBAAC,IAAD,CAAKG,MAAM,OAAOE,YAAY,wBAC9B,kBAAC,IAAD,MACA,yBAAKrC,UAAU,WACb,yBAAKA,UAAU,kBACb,4CACA,kBAAC,EAAD,OAEF,yBAAKA,UAAU,kBACb,8CACA,kBAAC,EAAD,QAGJ,2CACA,kBAAC,EAAD,MACA,8CACCoC,EAAMX,KAAI,YAAc,IAAXV,EAAW,EAAXA,KACNoB,EAAQpB,EAAKH,YAAYuB,OAASpB,EAAKuB,OAAOC,KACpD,OACE,6BAASb,IAAKX,EAAKuB,OAAOC,MACxB,gCACE,wBACEC,MAAO,CACLC,UAAW,IAGb,kBAAC,OAAD,CACEN,MAAO,WAAaA,EACpBK,MAAO,CACLE,UAAW,OACXC,YAAa,QAEfC,GAAI7B,EAAKuB,OAAOC,MACfJ,GAEH,2BACEK,MAAO,CACLK,QAAS,eACTC,SAAU,QAEV/B,EAAKH,YAAYmC,YAM/B,2BACE,kBAAC,OAAD,CAAMP,MAAO,CAAEE,UAAW,QAAUE,GAAG,OAAvC,oBAUiB,e","file":"component---src-pages-index-tsx-f4c107e3866b5d173f37.js","sourcesContent":["import React from \"react\"\nimport { StaticQuery, graphql } from \"gatsby\"\n\nconst TotalEpisodes = () => (\n  <StaticQuery\n    query={graphql`\n      {\n        allMarkdownRemark {\n          edges {\n            node {\n              id\n            }\n          }\n        }\n      }\n    `}\n    render={data => {\n      let edges=JSON.parse(JSON.stringify(data, null, 4)).allMarkdownRemark.edges\n\n      return (\n        <div className=\"widgets-number\">\n          {edges.length}\n        </div>\n      )\n    }}\n  ></StaticQuery>\n)\n\nexport default TotalEpisodes\n","import React from \"react\"\nimport { StaticQuery, graphql } from \"gatsby\"\n\nfunction ShowItem(props) {\n  return (\n    <li>\n      <strong>{props.show}</strong> ({props.average})\n    </li>\n  );\n}\n\nfunction ShowsList(props) {\n  const groups = props.groups;\n  let topShows = []\n\n  groups.forEach((group) => {\n    const nodes = group.nodes;\n    let show = {\n      show: nodes[0].frontmatter.show,\n      totalCount: group.totalCount\n    };\n    let total = 0\n\n    nodes.forEach((node) => {\n      total += node.frontmatter.rating;\n    });\n\n    show.average = parseFloat((total / nodes.length).toFixed(2));\n    topShows.push(show);\n  })\n\n  // Order DESC (best average first and then if tie, by total count)\n  topShows.sort(function (a, b) {\n    let n = b.average - a.average;\n    if (n !== 0) {\n        return n;\n    }\n\n    return b.totalCount - a.totalCount;\n  });\n\n\n  topShows = topShows.slice(0, 5);\n\n  return (\n    <ul>\n      { topShows.map((show) =>\n        <ShowItem key={show.show}\n                  show={show.show}\n                  average={show.average} />\n      )}\n    </ul>\n  );\n}\n\nconst TopShows = () => (\n  <StaticQuery\n    query={graphql`\n      {\n        allMarkdownRemark {\n          group(field: frontmatter___show) {\n            nodes {\n              frontmatter {\n                rating\n                show\n              }\n            }\n            totalCount\n          }\n        }\n      }\n    `}\n    render={data => {\n      let groups = JSON.parse(JSON.stringify(data, null, 4)).allMarkdownRemark.group;\n\n      return (\n        <div>\n          <ShowsList groups={groups} />\n        </div>\n      )\n    }}\n  ></StaticQuery>\n)\n\nexport default TopShows\n","import React from \"react\"\nimport { StaticQuery, graphql } from \"gatsby\"\n\nconst NumberOfShows = () => (\n  <StaticQuery\n    query={graphql`\n      {\n        allMarkdownRemark {\n          group(field: frontmatter___show) {\n            edges {\n              node {\n                id\n                frontmatter {\n                  show\n                }\n              }\n            }\n          }\n        }\n      }\n    `}\n    render={data => {\n      let groups=JSON.parse(JSON.stringify(data, null, 4)).allMarkdownRemark.group\n\n      return (\n        <div className=\"widgets-number\">\n          {groups.length}\n        </div>\n      )\n    }}\n  ></StaticQuery>\n)\n\nexport default NumberOfShows\n","// Gatsby supports TypeScript natively!\nimport React from \"react\"\nimport { PageProps, Link, graphql } from \"gatsby\"\n\nimport TotalEpisodes from \"../components/totalEpisodes\"\nimport TopShows from \"../components/topShows\"\nimport NumberOfShows from \"../components/numberOfShows\"\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { rhythm } from \"../utils/typography\"\n\ntype Data = {\n  site: {\n    siteMetadata: {\n      title: string\n    }\n  }\n  allMarkdownRemark: {\n    edges: {\n      node: {\n        excerpt: string\n        frontmatter: {\n          title: string\n          date: string\n          rating: number\n        }\n        fields: {\n          slug: string\n        }\n      }\n    }[]\n  }\n}\n\nconst BlogIndex = ({ data, location }: PageProps<Data>) => {\n  const siteTitle = data.site.siteMetadata.title\n  const posts = data.allMarkdownRemark.edges\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title=\"Home\" description=\"My TV Shows reviews\" />\n      <Bio />\n      <div className=\"widgets\">\n        <div className=\"widgets-column\">\n          <h2>Unique shows</h2>\n          <NumberOfShows />\n        </div>\n        <div className=\"widgets-column\">\n          <h2>Total episodes</h2>\n          <TotalEpisodes />\n        </div>\n      </div>\n      <h2>Top 5 shows</h2>\n      <TopShows />\n      <h2>Latest reviews</h2>\n      {posts.map(({ node }) => {\n        const title = node.frontmatter.title || node.fields.slug\n        return (\n          <article key={node.fields.slug}>\n            <header>\n              <h3\n                style={{\n                  marginTop: 0,\n                }}\n              >\n                <Link\n                  title={\"Review: \" + title}\n                  style={{\n                    boxShadow: `none`,\n                    marginRight: '15px'\n                  }}\n                  to={node.fields.slug}>\n                  {title}\n                </Link>\n                <small\n                  style={{\n                    display: 'inline-block',\n                    fontSize: `60%`,\n                  }}\n                  >{node.frontmatter.date}</small>\n              </h3>\n            </header>\n          </article>\n        )\n      })}\n      <p>\n        <Link style={{ boxShadow: `none` }} to=\"all\">\n          All reviews &#10230;\n        </Link>\n      </p>\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }, limit: 5) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            rating\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}