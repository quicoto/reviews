{"version":3,"sources":["webpack:///./src/components/totalTime.js","webpack:///./src/components/totalMovies.js","webpack:///./src/components/totalEpisodes.js","webpack:///./src/components/topShows.js","webpack:///./src/components/latestMovies.js","webpack:///./src/components/latestTVShows.js","webpack:///./src/components/numberOfShows.js","webpack:///./src/pages/index.tsx"],"names":["TotalTime","query","render","data","movies","JSON","parse","stringify","edges","series","group","seriesMinutes","forEach","show","found","nodes","find","i","frontmatter","time","totalCount","hours","Math","round","length","days","months","years","className","hidden","Intl","NumberFormat","format","TotalMovies","allMarkdownRemark","TotalEpisodes","slugify","require","ShowItem","props","name","style","marginBottom","marginTop","title","boxShadow","marginRight","to","stars","average","ShowsList","groups","topShows","total","node","rating","roundHalf","parseFloat","toFixed","push","filter","sort","a","b","n","slice","map","index","key","toString","TopShows","LatestMovies","cover","NumberOfShows","pageQuery","BlogIndex","location","siteTitle","site","siteMetadata","description"],"mappings":"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","file":"component---src-pages-index-tsx-fdb1ed4fe9e40395ef1e.js","sourcesContent":["import React from \"react\"\nimport { StaticQuery, graphql } from \"gatsby\"\n\nconst TotalTime = () => (\n  <StaticQuery\n    query={graphql`\n      {\n        movies: allMarkdownRemark(\n          filter: { frontmatter: { type: { eq: \"movie\" } } }\n        ) {\n          edges {\n            node {\n              id\n            }\n          }\n        }\n        series: allMarkdownRemark(\n          sort: {\n            order: [ASC, ASC]\n            fields: [frontmatter___season, frontmatter___episode]\n          }\n          filter: { frontmatter: { type: { eq: \"series\" } } }\n        ) {\n          group(field: frontmatter___name) {\n            nodes {\n              fields {\n                slug\n              }\n              frontmatter {\n                date(formatString: \"MMMM DD, YYYY\")\n                time\n                title\n                name\n                rating\n                season\n                episode\n              }\n              id\n            }\n            totalCount\n          }\n        }\n      }\n    `}\n    render={data => {\n      let movies = JSON.parse(JSON.stringify(data.movies, null, 4)).edges\n      let series = JSON.parse(JSON.stringify(data.series, null, 4)).group\n      let seriesMinutes = 0\n\n      series.forEach(show => {\n        const found = show.nodes.find(i => i.frontmatter.time !== null)\n\n        if (found) {\n          seriesMinutes += found.frontmatter.time * show.totalCount\n        }\n      })\n\n      const hours = Math.round((movies.length * 120) / 60 + seriesMinutes / 60)\n      const days = Math.round(hours / 24)\n      const months = Math.round(days / 30)\n      const years = Math.round(months / 12)\n\n      return (\n        <div className=\"widgets-number widgets-number--time\">\n          <p hidden={hours === 0}>\n            {new Intl.NumberFormat().format(hours)} hours\n          </p>\n          <p hidden={days === 0}>{new Intl.NumberFormat().format(days)} days</p>\n          <p hidden={months === 0}>\n            {new Intl.NumberFormat().format(months)} month\n            {months > 1 ? \"s\" : \"\"}\n          </p>\n          <p hidden={years === 0}>\n            {new Intl.NumberFormat().format(years)} years\n          </p>\n        </div>\n      )\n    }}\n  ></StaticQuery>\n)\n\nexport default TotalTime\n","import React from \"react\"\nimport { StaticQuery, graphql } from \"gatsby\"\n\nconst TotalMovies = () => (\n  <StaticQuery\n    query={graphql`\n      {\n        allMarkdownRemark(filter: { frontmatter: { type: { eq: \"movie\" } } }) {\n          edges {\n            node {\n              id\n            }\n          }\n        }\n      }\n    `}\n    render={data => {\n      let edges = JSON.parse(JSON.stringify(data, null, 4)).allMarkdownRemark\n        .edges\n\n      return <div className=\"widgets-number\">{edges.length}</div>\n    }}\n  ></StaticQuery>\n)\n\nexport default TotalMovies\n","import React from \"react\"\nimport { StaticQuery, graphql } from \"gatsby\"\n\nconst TotalEpisodes = () => (\n  <StaticQuery\n    query={graphql`\n      {\n        allMarkdownRemark(filter: { frontmatter: { type: { eq: \"series\" } } }) {\n          edges {\n            node {\n              id\n            }\n          }\n        }\n      }\n    `}\n    render={data => {\n      let edges = JSON.parse(JSON.stringify(data, null, 4)).allMarkdownRemark\n        .edges\n\n      return (\n        <div className=\"widgets-number\">\n          {new Intl.NumberFormat().format(edges.length)}\n        </div>\n      )\n    }}\n  ></StaticQuery>\n)\n\nexport default TotalEpisodes\n","import React from \"react\"\nimport { StaticQuery, graphql, Link } from \"gatsby\"\nimport { stars, roundHalf } from \"../utils/shared\"\nconst slugify = require(\"@sindresorhus/slugify\")\n\nfunction ShowItem(props) {\n  const name = props.show\n\n  return (\n    <li>\n      <h3\n        style={{\n          marginBottom: \"2rem\",\n          marginTop: \"0\",\n        }}\n      >\n        <Link\n          title={`All reviews for: ${name}`}\n          style={{\n            boxShadow: `none`,\n            marginBottom: \"10px\",\n            marginRight: \"15px\",\n          }}\n          to={`/tv-shows#${slugify(name)}`}\n        >\n          <strong>{name}</strong>{\" \"}\n          <span className=\"rating\">{stars(props.average)}</span>\n        </Link>\n      </h3>\n    </li>\n  )\n}\n\nfunction ShowsList(props) {\n  const groups = props.groups\n  let topShows = []\n\n  groups.forEach(group => {\n    const nodes = group.nodes\n    let show = {\n      name: nodes[0].frontmatter.name,\n      totalCount: group.totalCount,\n    }\n    let total = 0\n\n    nodes.forEach(node => {\n      total += node.frontmatter.rating\n    })\n\n    show.average = roundHalf(parseFloat((total / nodes.length).toFixed(2)))\n    topShows.push(show)\n  })\n\n  // Discard shows with less than 6 reviews\n  topShows = topShows.filter(show => show.totalCount > 6)\n\n  // Order DESC (best average first and then if tie, by total count)\n  topShows.sort(function (a, b) {\n    let n = b.average - a.average\n    if (n !== 0) {\n      return n\n    }\n\n    return b.totalCount - a.totalCount\n  })\n\n  topShows = topShows.slice(0, 10)\n\n  return (\n    <ul className=\"list-no-style\">\n      {topShows.map((show, index) => (\n        <ShowItem\n          key={index.toString()}\n          show={show.name}\n          average={show.average}\n        />\n      ))}\n    </ul>\n  )\n}\n\nconst TopShows = () => (\n  <StaticQuery\n    query={graphql`\n      {\n        allMarkdownRemark(filter: { frontmatter: { type: { eq: \"series\" } } }) {\n          group(field: frontmatter___name) {\n            nodes {\n              frontmatter {\n                rating\n                name\n              }\n            }\n            totalCount\n          }\n        }\n      }\n    `}\n    render={data => {\n      let groups = JSON.parse(JSON.stringify(data, null, 4)).allMarkdownRemark\n        .group\n\n      return (\n        <div className=\"topShows\">\n          <ShowsList groups={groups} />\n        </div>\n      )\n    }}\n  ></StaticQuery>\n)\n\nexport default TopShows\n","import React from \"react\"\nimport { StaticQuery, graphql } from \"gatsby\"\nimport { List } from \"../utils/shared\"\n\nconst LatestMovies = props => (\n  <StaticQuery\n    query={graphql`\n      {\n        allMarkdownRemark(\n          sort: { fields: [frontmatter___date], order: DESC }\n          limit: 6\n          filter: { frontmatter: { type: { eq: \"movie\" } } }\n        ) {\n          edges {\n            node {\n              fields {\n                slug\n              }\n              frontmatter {\n                name\n                date(formatString: \"MMMM DD, YYYY\")\n                title\n                rating\n              }\n              id\n            }\n          }\n        }\n      }\n    `}\n    render={data => {\n      let edges = JSON.parse(JSON.stringify(data, null, 4)).allMarkdownRemark\n        .edges\n\n      return (\n        <div className=\"latestItems\">\n          <List edges={edges} cover={true} />\n        </div>\n      )\n    }}\n  ></StaticQuery>\n)\n\nexport default LatestMovies\n","import React from \"react\"\nimport { StaticQuery, graphql } from \"gatsby\"\nimport { List } from \"../utils/shared\"\n\nconst LatestMovies = props => (\n  <StaticQuery\n    query={graphql`\n      {\n        allMarkdownRemark(\n          sort: { fields: [frontmatter___date], order: DESC }\n          limit: 6\n          filter: { frontmatter: { type: { eq: \"series\" } } }\n        ) {\n          edges {\n            node {\n              fields {\n                slug\n              }\n              frontmatter {\n                name\n                date(formatString: \"MMMM DD, YYYY\")\n                title\n                rating\n              }\n              id\n            }\n          }\n        }\n      }\n    `}\n    render={data => {\n      let edges = JSON.parse(JSON.stringify(data, null, 4)).allMarkdownRemark\n        .edges\n\n      return (\n        <div className=\"latestItems\">\n          <List edges={edges} cover={true} />\n        </div>\n      )\n    }}\n  ></StaticQuery>\n)\n\nexport default LatestMovies\n","import React from \"react\"\nimport { StaticQuery, graphql } from \"gatsby\"\n\nconst NumberOfShows = () => (\n  <StaticQuery\n    query={graphql`\n      {\n        allMarkdownRemark(filter: { frontmatter: { type: { eq: \"series\" } } }) {\n          group(field: frontmatter___name) {\n            edges {\n              node {\n                id\n                frontmatter {\n                  name\n                }\n              }\n            }\n          }\n        }\n      }\n    `}\n    render={data => {\n      let groups = JSON.parse(JSON.stringify(data, null, 4)).allMarkdownRemark\n        .group\n\n      return <div className=\"widgets-number\">{groups.length}</div>\n    }}\n  ></StaticQuery>\n)\n\nexport default NumberOfShows\n","// Gatsby supports TypeScript natively!\nimport React from \"react\"\nimport { PageProps, Link, graphql } from \"gatsby\"\n\nimport TotalTime from \"../components/totalTime\"\nimport TotalMovies from \"../components/totalMovies\"\nimport TotalEpisodes from \"../components/totalEpisodes\"\nimport TopShows from \"../components/topShows\"\nimport LatestMovies from \"../components/latestMovies\"\nimport LatestTVShows from \"../components/latestTVShows\"\nimport NumberOfShows from \"../components/numberOfShows\"\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { rhythm } from \"../utils/typography\"\n\ntype Data = {\n  site: {\n    siteMetadata: {\n      title: string\n    }\n  }\n}\n\nconst BlogIndex = ({ data, location }: PageProps<Data>) => {\n  const siteTitle = data.site.siteMetadata.title\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title=\"Home\" description=\"My TV Shows reviews\" />\n      <Bio />\n\n      <div className=\"widgets\">\n        <div className=\"widgets-column\">\n          <h2>Unique shows</h2>\n          <NumberOfShows />\n        </div>\n        <div className=\"widgets-column\">\n          <h2>Total episodes</h2>\n          <TotalEpisodes />\n        </div>\n        <div className=\"widgets-column\">\n          <h2>Total movies</h2>\n          <TotalMovies />\n        </div>\n        <div className=\"widgets-column\">\n          <h2>Time spent</h2>\n          <TotalTime />\n        </div>\n      </div>\n\n      <hr/>\n\n      <h2 style={{ marginTop: '0' }}>Latest TV Show reviews</h2>\n      <LatestTVShows />\n      <p>\n        <Link style={{ boxShadow: `none` }} to=\"tv-shows\">\n          All TV Show Reviews &#10230;\n        </Link>\n      </p>\n\n      <hr/>\n\n      <h2 style={{ marginTop: '0' }}>Latest Movie reviews</h2>\n      <LatestMovies />\n      <p>\n        <Link style={{ boxShadow: `none` }} to=\"movies\">\n          All Movie Reviews &#10230;\n        </Link>\n      </p>\n\n      <hr/>\n\n      <h2 style={{ marginTop: '0' }}>Top 10 shows</h2>\n      <TopShows />\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n  }\n`\n"],"sourceRoot":""}