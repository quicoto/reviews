{"version":3,"sources":["webpack:///./src/components/fileBuilder.js","webpack:///./src/pages/builder.tsx"],"names":["slugify","require","FileBuilder","state","comment","episode","markdown","rating","season","show","share","onChange","event","setState","target","name","value","onClick","preventDefault","document","querySelector","select","execCommand","prepareMarkdown","now","Date","month","getMonth","date","getFullYear","getDate","getHours","getMinutes","getSeconds","i","render","Item","props","nodes","frontmatter","className","htmlFor","id","this","defaultValue","query","data","JSON","parse","stringify","allMarkdownRemark","group","map","item","index","key","toString","type","rows","readOnly","href","React","Component","pageQuery","AllShows","location","siteTitle","site","siteMetadata","title","description","style","marginTop"],"mappings":"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","file":"component---src-pages-builder-tsx-cbd527c47ea3fe3eb46e.js","sourcesContent":["import React from \"react\"\nimport { StaticQuery, graphql } from \"gatsby\"\nconst slugify = require(\"@sindresorhus/slugify\")\n\nexport default class FileBuilder extends React.Component{\n\n  state = {\n    comment: '',\n    episode: '',\n    markdown: '',\n    rating: \"3\",\n    season: \"\",\n    show: \"\",\n    share: \"0\"\n  }\n\n  prepareMarkdown(state) {\n    const now = new Date();\n    let month = now.getMonth()+1;\n    if (month < 10) month = `0${month}`\n    const date = `${now.getFullYear()}-${month}-${now.getDate()}T${now.getHours()}:${now.getMinutes()}:${now.getSeconds()}`\n    const defaultComment = \"*[No review was written for this episode]*\"\n    let rating = \"\"\n\n    for (let i = 0; i < +state.rating; i++) {\n      rating += '⭐️'\n    }\n\n\n    return `---\ntype: series\ntitle: \"${state.show} ${state.season}x${state.episode}\"\ndate: \"${date}\"\nname: \"${state.show}\"\nseason: ${+state.season}\nepisode: ${+state.episode}\nrating: ${+state.rating}\nratingEmoji: \"${rating}\"\nshare: ${state.share === \"1\" ? 'true' : 'false'}\n---\n\n${state.comment ? state.comment : defaultComment }`\n  }\n\n  onChange = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value\n    })\n  }\n\n  onClick = (event) => {\n    event.preventDefault();\n    const el = document.querySelector('[name=\"markdown\"]');\n    el.select();\n    document.execCommand('copy');\n  }\n   render(){\n\n    function Item(props) {\n      const name = props.nodes[0].frontmatter.name\n      return (\n        <option value={name}>{name}</option>\n      )\n    }\n\n    return(\n     <div>\n      <form className=\"builder\">\n            <div className=\"row\">\n              <label htmlFor=\"show\" className=\"form-label\">TV Shows</label>\n              <select className=\"form-select\" id=\"show\" name=\"show\" onChange={this.onChange} defaultValue={this.state.show}>\n                <option value=\"\">Select TV Show</option>\n                <StaticQuery\n                  query={graphql`\n                    {\n                      allMarkdownRemark(\n                        sort: {\n                          order: [ASC, ASC]\n                          fields: [frontmatter___season, frontmatter___episode]\n                        }\n                        filter: { frontmatter: { type: { eq: \"series\" } } }\n                      ) {\n                        group(field: frontmatter___name) {\n                          nodes {\n                            fields {\n                              slug\n                            }\n                            frontmatter {\n                              date(formatString: \"MMMM DD, YYYY\")\n                              title\n                              name\n                              rating\n                              season\n                              episode\n                            }\n                            id\n                          }\n                          totalCount\n                        }\n                      }\n                    }\n                  `}\n                  render={data => {\n                    let nodes = JSON.parse(JSON.stringify(data, null, 4)).allMarkdownRemark\n                      .group\n\n                    return (\n                      nodes.map((item, index) => (\n                          <Item key={index.toString()} nodes={item.nodes} />\n                        ))\n                    )\n                  }}\n                ></StaticQuery>\n              </select>\n            </div>\n            <div className=\"row\">\n              <label htmlFor=\"Season\" className=\"form-label\">Season</label>\n              <input id=\"Season\" type=\"number\" name=\"season\"\n              onChange={this.onChange} />\n            </div>\n            <div className=\"row\">\n              <label htmlFor=\"Episode\" className=\"form-label\">Episode</label>\n              <input id=\"Episode\" type=\"number\" name=\"episode\"\n              onChange={this.onChange} />\n            </div>\n            <div className=\"row\">\n              <label htmlFor=\"rating\" className=\"form-label\">Rating</label>\n              <select className=\"form-select\" id=\"rating\"\n              onChange={this.onChange} name=\"rating\" defaultValue={this.state.rating}>\n                <option value=\"1\">1</option>\n                <option value=\"2\">2</option>\n                <option value=\"3\">3</option>\n                <option value=\"4\">4</option>\n                <option value=\"5\">5</option>\n              </select>\n            </div>\n            <div className=\"row\">\n              <label htmlFor=\"Comment\" className=\"form-label\">Comment</label>\n              <textarea className=\"form-control\" id=\"Comment\" rows=\"3\" name=\"comment\" onChange={this.onChange}></textarea>\n            </div>\n            <div className=\"row\">\n              <label htmlFor=\"markdown\" className=\"form-label\">Markdown</label>\n              <textarea readOnly className=\"form-control\" id=\"markdown\" rows=\"3\" name=\"markdown\" value={this.prepareMarkdown(this.state)}></textarea>\n            </div>\n            <div className=\"row\">\n              <label htmlFor=\"share\" className=\"form-label\">Share</label>\n              <select className=\"form-select\" id=\"share\" name=\"share\"\n              onChange={this.onChange} defaultValue={this.state.share}>\n                <option value=\"0\">False</option>\n                <option value=\"1\">True</option>\n              </select>\n            </div>\n            <div className=\"actions\">\n              <button onClick={this.onClick}>Copy</button>\n              <a href={`https://github.com/quicoto/reviews/new/master/content/blog/tv-shows/?filename=tv-shows/${slugify(this.state.show)}/${this.state.season}x${this.state.episode}/index.md`}>Create file on Github</a>\n            </div>\n          </form>\n     </div>\n    )\n   }\n}\n\n// const FileBuilder = props => (\n\n// )\n\n// export default FileBuilder\n","// Gatsby supports TypeScript natively!\nimport React from \"react\"\nimport { PageProps, Link, graphql } from \"gatsby\"\n\nimport FileBuilder from \"../components/fileBuilder\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\ntype Data = {\n  site: {\n    siteMetadata: {\n      title: string\n    }\n  }\n}\n\nconst AllShows = ({ data, location }: PageProps<Data>) => {\n  const siteTitle = data.site.siteMetadata.title\n  const title = \"Builder\"\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title={title} description=\"\" />\n\n      <h1 style={{ marginTop: `0` }}>{title}</h1>\n\n      <FileBuilder />\n    </Layout>\n  )\n}\n\nexport default AllShows\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n  }\n`\n"],"sourceRoot":""}