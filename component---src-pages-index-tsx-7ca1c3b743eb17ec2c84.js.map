{"version":3,"sources":["webpack:///./src/components/topShows.js","webpack:///./src/pages/index.tsx"],"names":["ShowsList","props","groups","forEach","group","TopShows","query","render","data","JSON","parse","stringify","allMarkdownRemark","pageQuery","BlogIndex","location","siteTitle","site","siteMetadata","title","posts","edges","map","node","frontmatter","fields","slug","key","style","marginTop","boxShadow","to","fontSize","marginLeft","date"],"mappings":"6LAOA,SAASA,EAAUC,GACjB,IAAMC,EAASD,EAAMC,OAKrB,OACE,4BAMIA,EAAOC,SAAQ,SAAAC,GACb,OACE,wCAUZ,IAqEeC,EArEE,kBACf,kBAAC,cAAD,CACEC,MAAK,aAoBLC,OAAQ,SAAAC,GACN,IAAIN,EAAOO,KAAKC,MAAMD,KAAKE,UAAUH,EAAM,KAAM,IAAII,kBAAkBR,MAEvE,OACE,6BACE,2BAAG,oDACH,kBAACJ,EAAD,CAAWE,OAAQA,MA3B3B,U,oCCyCWW,GAFEC,UAvCG,SAAC,GAAwC,IAAtCN,EAAsC,EAAtCA,KAAMO,EAAgC,EAAhCA,SACnBC,EAAYR,EAAKS,KAAKC,aAAaC,MACnCC,EAAQZ,EAAKI,kBAAkBS,MAErC,OACE,kBAAC,IAAD,CAAQN,SAAUA,EAAUI,MAAOH,GACjC,kBAAC,IAAD,CAAKG,MAAM,SACX,kBAAC,IAAD,MACA,yCACA,kBAAC,EAAD,MACA,8CACCC,EAAME,KAAI,YAAc,IAAXC,EAAW,EAAXA,KACNJ,EAAQI,EAAKC,YAAYL,OAASI,EAAKE,OAAOC,KACpD,OACE,6BAASC,IAAKJ,EAAKE,OAAOC,MACxB,gCACE,wBACEE,MAAO,CACLC,UAAW,IAGb,kBAAC,OAAD,CAAMD,MAAO,CAAEE,UAAW,QAAUC,GAAIR,EAAKE,OAAOC,MACjDP,GAEH,2BACES,MAAO,CACLI,SAAU,MACVC,WAAY,SAEZV,EAAKC,YAAYU,cAYZ,e","file":"component---src-pages-index-tsx-7ca1c3b743eb17ec2c84.js","sourcesContent":["import React from \"react\"\nimport { StaticQuery, graphql } from \"gatsby\"\n\nfunction ShowItem(props) {\n  return <li>{props.value}</li>;\n}\n\nfunction ShowsList(props) {\n  const groups = props.groups;\n\n  // <ShowItem key={group.edges[0].node.id}\n  //                 value={group.edges[0].node.frontmatter.show} />\n\n  return (\n    <ul>\n      {/* {shows.map((show) =>\n        <ShowItem key={number.toString()}\n                  value={number} />\n      )} */}\n      {\n        groups.forEach(group => {\n          return (\n            <div>\n              hey\n            </div>\n          )\n        })\n      }\n    </ul>\n  );\n}\n\nconst TopShows = () => (\n  <StaticQuery\n    query={graphql`\n      {\n        site(siteMetadata: {title: {}}) {\n          id\n        }\n        allMarkdownRemark {\n          group(field: frontmatter___show) {\n            edges {\n              node {\n                id\n                frontmatter {\n                  show\n                  rating\n                }\n              }\n            }\n          }\n        }\n      }\n    `}\n    render={data => {\n      let groups=JSON.parse(JSON.stringify(data, null, 4)).allMarkdownRemark.group\n\n      return (\n        <div>\n          <p><em>Work in progress...</em></p>\n          <ShowsList groups={groups} />\n        </div>\n      )\n    }}\n  ></StaticQuery>\n)\n\n// const TopShows = ({ data }) => {\n//   const { site } = useStaticQuery(\n//     graphql`\n//       {\n//         allMarkdownRemark {\n//           edges {\n//             node {\n//               id\n//             }\n//           }\n//           group(field: frontmatter___show) {\n//             edges {\n//               node {\n//                 id\n//                 frontmatter {\n//                   show\n//                   rating\n//                 }\n//               }\n//             }\n//           }\n//         }\n//       }\n//     `\n//   )\n\n//   return (\n//     <div>\n//       <p>These are the top shows:</p>\n//       <pre>{data}</pre>\n//     </div>\n//   )\n// }\n\nexport default TopShows\n","// Gatsby supports TypeScript natively!\nimport React from \"react\"\nimport { PageProps, Link, graphql } from \"gatsby\"\n\nimport TopShows from \"../components/topShows\"\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { rhythm } from \"../utils/typography\"\n\ntype Data = {\n  site: {\n    siteMetadata: {\n      title: string\n    }\n  }\n  allMarkdownRemark: {\n    edges: {\n      node: {\n        excerpt: string\n        frontmatter: {\n          title: string\n          date: string\n          rating: number\n        }\n        fields: {\n          slug: string\n        }\n      }\n    }[]\n  }\n}\n\nconst BlogIndex = ({ data, location }: PageProps<Data>) => {\n  const siteTitle = data.site.siteMetadata.title\n  const posts = data.allMarkdownRemark.edges\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title=\"Home\" />\n      <Bio />\n      <h2>Top Shows</h2>\n      <TopShows />\n      <h2>Latest reviews</h2>\n      {posts.map(({ node }) => {\n        const title = node.frontmatter.title || node.fields.slug\n        return (\n          <article key={node.fields.slug}>\n            <header>\n              <h3\n                style={{\n                  marginTop: 0,\n                }}\n              >\n                <Link style={{ boxShadow: `none` }} to={node.fields.slug}>\n                  {title}\n                </Link>\n                <small\n                  style={{\n                    fontSize: `60%`,\n                    marginLeft: '15px'\n                  }}\n                  >{node.frontmatter.date}</small>\n              </h3>\n            </header>\n          </article>\n        )\n      })}\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            rating\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}