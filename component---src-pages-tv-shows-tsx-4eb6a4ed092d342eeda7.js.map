{"version":3,"file":"component---src-pages-tv-shows-tsx-4eb6a4ed092d342eeda7.js","mappings":"4NAKA,SAASA,EAAKC,GACZ,IAAMC,EAAOD,EAAME,MAAM,GAAGC,YAAYF,KACpCG,EAAU,EAYd,OAVAJ,EAAME,MAAMG,KAAI,SAACC,EAAMC,GAGrB,OAFAH,GAAoBI,SAASF,EAAKH,YAAYM,SAEvC,KAGTL,GAAUM,EAAAA,EAAAA,IACRC,YAAYP,EAAUI,SAASR,EAAME,MAAMU,SAASC,QAAQ,KAI5D,+BACE,sBACEC,UAAU,gBACVC,IAAIC,EAAAA,EAAAA,GAAQf,GACZgB,MAAO,CACLC,UAAW,EACXC,aAAc,IACdC,WAAY,SAGd,wBACEH,MAAO,CACLI,QAAS,OACTC,SAAU,OACVH,aAAc,SAGhB,gBAAC,EAAAI,KAAD,CACEC,MAAK,oBAAsBvB,EAC3BgB,MAAO,CACLQ,UAAU,OACVN,aAAc,OACdO,YAAa,QAEfC,GAAE,cAAeX,EAAAA,EAAAA,GAAQf,IAP3B,KAWA,4BAAOA,GACP,wBAAMa,UAAU,kBACd,yCADF,KAC2Bc,EAAAA,EAAAA,IAAMxB,KAGnC,uBACEa,MAAO,CACLY,WAAY,SAGd,0CALF,IAMG7B,EAAME,MAAMG,KAAI,SAACC,EAAMC,GAAP,OACf,wBAAMuB,IAAKvB,EAAMwB,YACf,gBAAC,EAAAR,KAAD,CACEC,MAAK,WAAalB,EAAKH,YAAYqB,MACnCP,MAAO,CACLI,QAAS,eACTI,UAAU,OACVN,aAAc,OACdO,YAAa,QAEfC,GAAIrB,EAAK0B,OAAOC,MAEf3B,EAAKH,YAAY+B,OAVpB,IAU6B5B,EAAKH,YAAYgC,gBAU5D,IA8CA,EA9CmB,SAAAnC,GAAK,OACtB,gBAAC,EAAAoC,YAAD,CACEC,MAAK,aA6BLC,OAAQ,SAAAC,GACN,IAAIrC,EAAQsC,KAAKC,MAAMD,KAAKE,UAAUH,EAAM,KAAM,IAAII,kBACnDC,MAEH,OACE,2BACG1C,EAAMG,KAAI,SAACC,EAAMC,GAAP,OACT,gBAACR,EAAD,CAAM+B,IAAKvB,EAAMwB,WAAY7B,MAAOI,EAAKJ,gB,8BC/ErD,EAvBiB,SAAC,GAAyC,IAAvCqC,EAAsC,EAAtCA,KAAMM,EAAgC,EAAhCA,SAClBC,EAAYP,EAAKQ,KAAKC,aAAaxB,MACnCA,EAAQ,uBAEd,OACE,gBAAC,IAAD,CAAQqB,SAAUA,EAAUrB,MAAOsB,GACjC,gBAAC,IAAD,CAAKtB,MAAOA,EAAOyB,YAAY,wEAC/B,sBAAIhC,MAAO,CAAEC,UAAU,MAASM,GAEhC,gBAAC,EAAD,MAEA,yBACE,gBAAC,EAAAD,KAAD,CAAMN,MAAO,CAAEQ,UAAU,QAAWE,GAAG,KAAvC,gBAIF,uBAAKV,MAAO,CAAEG,WAAW,SACvB,gBAAC,IAAD","sources":["webpack://ricard-torres-reviews/./src/components/allTVShows.js","webpack://ricard-torres-reviews/./src/pages/tv-shows.tsx"],"sourcesContent":["import React from \"react\"\nimport { StaticQuery, graphql, Link } from \"gatsby\"\nimport { stars, roundHalf } from \"../utils/shared\"\nimport slugify from '@sindresorhus/slugify'\n\nfunction Item(props) {\n  const name = props.nodes[0].frontmatter.name\n  let average = 0\n\n  props.nodes.map((item, index) => {\n    average = average + parseInt(item.frontmatter.rating)\n\n    return true\n  })\n\n  average = roundHalf(\n    parseFloat((average / parseInt(props.nodes.length)).toFixed(2))\n  )\n\n  return (\n    <article>\n      <h3\n        className=\"allShowsTitle\"\n        id={slugify(name)}\n        style={{\n          marginTop: 0,\n          marginBottom: \"0\",\n          paddingTop: \"2rem\",\n        }}\n      >\n        <span\n          style={{\n            display: \"flex\",\n            flexWrap: \"wrap\",\n            marginBottom: \"10px\",\n          }}\n        >\n          <Link\n            title={`All reviews for: ${name}`}\n            style={{\n              boxShadow: `none`,\n              marginBottom: \"10px\",\n              marginRight: \"15px\",\n            }}\n            to={`/tv-shows#${slugify(name)}`}\n          >\n            #\n          </Link>\n          <span>{name}</span>\n          <span className=\"rating d-block\">\n            <small>Average:</small> {stars(average)}\n          </span>\n        </span>\n        <div\n          style={{\n            marginLeft: \"33px\",\n          }}\n        >\n          <small>Episodes:</small>&nbsp;\n          {props.nodes.map((item, index) => (\n            <span key={index.toString()}>\n              <Link\n                title={`Review: ${item.frontmatter.title}`}\n                style={{\n                  display: \"inline-block\",\n                  boxShadow: `none`,\n                  marginBottom: \"10px\",\n                  marginRight: \"15px\",\n                }}\n                to={item.fields.slug}\n              >\n                {item.frontmatter.season}x{item.frontmatter.episode}\n              </Link>\n            </span>\n          ))}\n        </div>\n      </h3>\n    </article>\n  )\n}\n\nconst AllTVShows = props => (\n  <StaticQuery\n    query={graphql`\n      {\n        allMarkdownRemark(\n          sort: {\n            order: [ASC, ASC]\n            fields: [frontmatter___season, frontmatter___episode]\n          }\n          filter: { frontmatter: { type: { eq: \"series\" } } }\n        ) {\n          group(field: frontmatter___name) {\n            nodes {\n              fields {\n                slug\n              }\n              frontmatter {\n                date(formatString: \"MMMM DD, YYYY\")\n                title\n                name\n                rating\n                season\n                episode\n              }\n              id\n            }\n            totalCount\n          }\n        }\n      }\n    `}\n    render={data => {\n      let nodes = JSON.parse(JSON.stringify(data, null, 4)).allMarkdownRemark\n        .group\n\n      return (\n        <div>\n          {nodes.map((item, index) => (\n            <Item key={index.toString()} nodes={item.nodes} />\n          ))}\n        </div>\n      )\n    }}\n  ></StaticQuery>\n)\n\nexport default AllTVShows\n","// Gatsby supports TypeScript natively!\nimport React from \"react\"\nimport { PageProps, Link, graphql } from \"gatsby\"\n\nimport AllTVShows from \"../components/allTVShows\"\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\ntype Data = {\n  site: {\n    siteMetadata: {\n      title: string\n    }\n  }\n}\n\nconst AllShows = ({ data, location }: PageProps<Data>) => {\n  const siteTitle = data.site.siteMetadata.title\n  const title = \"All TV Shows Reviews\"\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title={title} description=\"All my TV Shows reviews including date, rating and some thoughts...\" />\n      <h1 style={{ marginTop: `0` }}>{title}</h1>\n\n      <AllTVShows />\n\n      <p>\n        <Link style={{ boxShadow: `none` }} to=\"/\">\n          &#10229; Back home\n        </Link>\n      </p>\n      <div style={{ paddingTop: `2rem` }}>\n        <Bio />\n      </div>\n    </Layout>\n  )\n}\n\nexport default AllShows\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n  }\n`\n"],"names":["Item","props","name","nodes","frontmatter","average","map","item","index","parseInt","rating","roundHalf","parseFloat","length","toFixed","className","id","slugify","style","marginTop","marginBottom","paddingTop","display","flexWrap","Link","title","boxShadow","marginRight","to","stars","marginLeft","key","toString","fields","slug","season","episode","StaticQuery","query","render","data","JSON","parse","stringify","allMarkdownRemark","group","location","siteTitle","site","siteMetadata","description"],"sourceRoot":""}