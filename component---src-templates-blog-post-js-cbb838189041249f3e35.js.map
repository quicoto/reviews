{"version":3,"sources":["webpack:///./src/components/cover.js","webpack:///./src/templates/blog-post.js"],"names":["Image","props","path","className","src","alt","name","title","Cover","imageSrc","data","useStaticQuery","i","len","allFile","edges","length","item","node","slug","publicURL","slugify","require","MoreLink","post","frontmatter","type","style","boxShadow","marginBottom","marginRight","to","BlogPostTemplate","location","pageContext","markdownRemark","siteTitle","site","siteMetadata","description","excerpt","marginTop","rhythm","scale","display","date","stars","rating","dangerouslySetInnerHTML","__html","html","aria-hidden","data-url","pathname","Helmet","defer","short","pageQuery"],"mappings":"iOAGA,SAASA,EAAMC,GACb,MAAmB,KAAfA,EAAMC,KAEN,yBACEC,UAAU,QACVC,IAAKH,EAAMC,KACXG,IAAKJ,EAAMK,KACXC,MAAON,EAAMK,OAKZ,GA6BME,MA1Bf,SAAeP,GAeb,IAdA,IAAIQ,EAAW,GACTC,EAAOC,yBAAe,cAanBC,EAAI,EAAGC,EAAMH,EAAKI,QAAQC,MAAMC,OAAQJ,EAAIC,EAAKD,IAAK,CAC7D,IAAMK,EAAOP,EAAKI,QAAQC,MAAMH,GAAGM,KAE/BD,EAAKX,OAASL,EAAMkB,OACtBV,EAAWQ,EAAKG,WAIpB,OAAO,kBAACpB,EAAD,CAAOE,KAAMO,EAAUH,KAAML,EAAMK,Q,wBC/BtCe,EAAUC,EAAQ,QAExB,SAASC,EAAStB,GAChB,IAAMuB,EAAOvB,EAAMuB,KAEnB,MAA8B,WAA1BA,EAAKC,YAAYC,KAEjB,2BACE,kBAAC,OAAD,CACEnB,MAAK,oBAAsBiB,EAAKC,YAAYnB,KAC5CqB,MAAO,CACLC,UAAU,OACVC,aAAc,OACdC,YAAa,QAEfC,GAAE,aAAeV,EAAQG,EAAKC,YAAYnB,OAP5C,oBASmB,4BAAKkB,EAAKC,YAAYnB,QAMxC,KAqEM0B,UAlEU,SAAC,GAAqC,IAAnCtB,EAAkC,EAAlCA,KAAmBuB,GAAe,EAA5BC,YAA4B,EAAfD,UACvCT,EAAOd,EAAKyB,eACZC,EAAY1B,EAAK2B,KAAKC,aAAa/B,MAEzC,OACE,kBAAC,IAAD,CAAQ0B,SAAUA,EAAU1B,MAAO6B,GACjC,kBAAC,IAAD,CACE7B,MAAOiB,EAAKC,YAAYlB,MACxBgC,YAAaf,EAAKC,YAAYc,aAAef,EAAKgB,UAEpD,6BAASrC,UAAU,QACjB,gCACE,kBAAC,EAAD,CACEgB,KAAME,EAAQG,EAAKC,YAAYnB,MAC/BA,KAAMkB,EAAKC,YAAYnB,OAEzB,wBACEqB,MAAO,CACLc,UAAWC,YAAO,GAClBb,aAAc,IAGfL,EAAKC,YAAYlB,OAEpB,uBACEoB,MAAK,iBACAgB,aAAM,IADN,CAEHC,QAAQ,QACRf,aAAca,YAAO,MAGtBlB,EAAKC,YAAYoB,MAEpB,yBAAK1C,UAAU,UAAU2C,YAAMtB,EAAKC,YAAYsB,UAElD,6BAASC,wBAAyB,CAAEC,OAAQzB,EAAK0B,QAEjD,kDACA,yBACEC,cAAY,OACZhD,UAAU,iBACViD,WAAA,GAAa1C,EAAK2B,KAAKC,aAAaD,KAAOJ,EAASoB,WAEtD,kBAACC,EAAA,EAAD,KACE,4BACEC,OAAK,EACLnD,IAAI,wEACJsB,KAAK,qBAIT,kBAACH,EAAD,CAAUC,KAAMA,IAEhB,wBACEG,MAAO,CACLE,aAAca,YAAO,MAGzB,gCACE,kBAAC,IAAD,CAAKc,OAAO,QA3DtB,IAoEaC,EAAS","file":"component---src-templates-blog-post-js-cbb838189041249f3e35.js","sourcesContent":["import React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction Image(props) {\n  if (props.path !== \"\") {\n    return (\n      <img\n        className=\"cover\"\n        src={props.path}\n        alt={props.name}\n        title={props.name}\n      />\n    )\n  }\n\n  return \"\"\n}\n\nfunction Cover(props) {\n  let imageSrc = \"\"\n  const data = useStaticQuery(graphql`\n    {\n      allFile(filter: { relativePath: { regex: \"/covers/\" } }) {\n        edges {\n          node {\n            name\n            publicURL\n          }\n        }\n      }\n    }\n  `)\n\n  for (let i = 0, len = data.allFile.edges.length; i < len; i++) {\n    const item = data.allFile.edges[i].node\n\n    if (item.name === props.slug) {\n      imageSrc = item.publicURL\n    }\n  }\n\n  return <Image path={imageSrc} name={props.name} />\n}\n\nexport default Cover\n","import React from \"react\"\nimport { graphql, Link } from \"gatsby\"\nimport { Helmet } from \"react-helmet\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport Cover from \"../components/cover\"\nimport { rhythm, scale } from \"../utils/typography\"\nimport { stars } from \"../utils/shared\"\nconst slugify = require(\"@sindresorhus/slugify\")\n\nfunction MoreLink(props) {\n  const post = props.post\n\n  if (post.frontmatter.type === \"series\") {\n    return (\n      <p>\n        <Link\n          title={`All reviews for: ${post.frontmatter.name}`}\n          style={{\n            boxShadow: `none`,\n            marginBottom: \"10px\",\n            marginRight: \"15px\",\n          }}\n          to={`/tv-shows#${slugify(post.frontmatter.name)}`}\n        >\n          More reviews for <em>{post.frontmatter.name}</em>\n        </Link>\n      </p>\n    )\n  }\n\n  return null\n}\n\nconst BlogPostTemplate = ({ data, pageContext, location }) => {\n  const post = data.markdownRemark\n  const siteTitle = data.site.siteMetadata.title\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n      />\n      <article className=\"item\">\n        <header>\n          <Cover\n            slug={slugify(post.frontmatter.name)}\n            name={post.frontmatter.name}\n          />\n          <h1\n            style={{\n              marginTop: rhythm(1),\n              marginBottom: 0,\n            }}\n          >\n            {post.frontmatter.title}\n          </h1>\n          <p\n            style={{\n              ...scale(-1 / 5),\n              display: `block`,\n              marginBottom: rhythm(1),\n            }}\n          >\n            {post.frontmatter.date}\n          </p>\n          <div className=\"rating\">{stars(post.frontmatter.rating)}</div>\n        </header>\n        <section dangerouslySetInnerHTML={{ __html: post.html }} />\n\n        <h4>What do you think?</h4>\n        <div\n          aria-hidden=\"true\"\n          className=\"emoji-reaction\"\n          data-url={`${data.site.siteMetadata.site}${location.pathname}`}\n        ></div>\n        <Helmet>\n          <script\n            defer\n            src=\"https://ricard.blog/emoji-reaction/assets/emoji-reaction.js?ver=2.0.3\"\n            type=\"text/javascript\"\n          />\n        </Helmet>\n\n        <MoreLink post={post} />\n\n        <hr\n          style={{\n            marginBottom: rhythm(1),\n          }}\n        />\n        <footer>\n          <Bio short={true} />\n        </footer>\n      </article>\n    </Layout>\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n        site\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        name\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        rating\n        type\n      }\n    }\n  }\n`\n"],"sourceRoot":""}